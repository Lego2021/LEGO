CREATE TABLE bttest_a(id int8);
 CREATE TABLE bttest_b(id int8);
 CREATE TABLE bttest_multi(id int8, data int8);
 CREATE TABLE delete_test_table (a bigint, b bigint, c bigint, d bigint);
  ALTER TABLE bttest_a SET (autovacuum_enabled = false);
 ALTER TABLE bttest_b SET (autovacuum_enabled = false);
 ALTER TABLE bttest_multi SET (autovacuum_enabled = false);
 ALTER TABLE delete_test_table SET (autovacuum_enabled = false);
  INSERT INTO bttest_a SELECT * FROM generate_series(1, 100000);
 INSERT INTO bttest_b SELECT * FROM generate_series(100000, 1, -1);
 INSERT INTO bttest_multi SELECT i, i%2  FROM generate_series(1, 100000) as i;
  CREATE INDEX bttest_a_idx ON bttest_a USING btree (id) WITH (deduplicate_items = ON);
 CREATE INDEX bttest_b_idx ON bttest_b USING btree (id);
 CREATE UNIQUE INDEX bttest_multi_idx ON bttest_multi USING btree (id) INCLUDE (data);
  CREATE ROLE regress_bttest_role;
  SET ROLE regress_bttest_role;
 SELECT bt_index_check('bttest_a_idx'::regclass);
 SELECT bt_index_parent_check('bttest_a_idx'::regclass);
 RESET ROLE;
  GRANT EXECUTE ON FUNCTION bt_index_check(regclass) TO regress_bttest_role;
 GRANT EXECUTE ON FUNCTION bt_index_parent_check(regclass) TO regress_bttest_role;
 GRANT EXECUTE ON FUNCTION bt_index_check(regclass, boolean) TO regress_bttest_role;
 GRANT EXECUTE ON FUNCTION bt_index_parent_check(regclass, boolean) TO regress_bttest_role;
 SET ROLE regress_bttest_role;
 SELECT bt_index_check('bttest_a_idx');
 SELECT bt_index_parent_check('bttest_a_idx');
 RESET ROLE;
  SELECT bt_index_check('bttest_a');
 SELECT bt_index_parent_check('bttest_a');
  SELECT bt_index_check(17);
 SELECT bt_index_parent_check(17);
  BEGIN;
 CREATE INDEX bttest_a_brin_idx ON bttest_a USING brin(id);
 SELECT bt_index_parent_check('bttest_a_brin_idx');
 ROLLBACK;
  SELECT bt_index_check('bttest_a_idx');
 SELECT bt_index_check('bttest_a_idx', true);
 SELECT bt_index_parent_check('bttest_b_idx', true);
  BEGIN;
 SELECT bt_index_check('bttest_a_idx');
 SELECT bt_index_parent_check('bttest_b_idx');
 SELECT * FROM pg_locks WHERE relation = ANY(ARRAY['bttest_a', 'bttest_a_idx', 'bttest_b', 'bttest_b_idx']::regclass[]) AND pid = pg_backend_pid();
 COMMIT;
  TRUNCATE bttest_a;
 INSERT INTO bttest_a SELECT 42 FROM generate_series(1, 2000);
 SELECT bt_index_check('bttest_a_idx', true);
  SELECT bt_index_check('bttest_multi_idx');
 SELECT bt_index_parent_check('bttest_multi_idx', true, true);
  TRUNCATE bttest_multi;
 INSERT INTO bttest_multi SELECT i, i%2  FROM generate_series(1, 100000) as i;
 SELECT bt_index_parent_check('bttest_multi_idx', true, true);
  INSERT INTO delete_test_table SELECT i, 1, 2, 3 FROM generate_series(1,80000) i;
 ALTER TABLE delete_test_table ADD PRIMARY KEY (a,b,c,d);
 DELETE FROM delete_test_table WHERE a < 79990;
 VACUUM delete_test_table;
 SELECT bt_index_parent_check('delete_test_table_pkey', true);
  CREATE TABLE toast_bug(buggy text);
 ALTER TABLE toast_bug ALTER COLUMN buggy SET STORAGE extended;
 CREATE INDEX toasty ON toast_bug(buggy);
  UPDATE pg_attribute SET attstorage = 'p' WHERE attrelid = 'toasty'::regclass AND attname = 'buggy';
  SELECT attstorage FROM pg_attribute WHERE attrelid = 'toast_bug'::regclass AND attname = 'buggy';
  INSERT INTO toast_bug SELECT repeat('a', 2200);
 SELECT bt_index_check('toasty', true);
  DROP TABLE bttest_a;
 DROP TABLE bttest_b;
 DROP TABLE bttest_multi;
 DROP TABLE delete_test_table;
 DROP TABLE toast_bug;
 DROP OWNED BY regress_bttest_role;
 -- permissions DROP ROLE regress_bttest_role;
 