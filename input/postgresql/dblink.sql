CREATE EXTENSION dblink;
  \set SHOW_CONTEXT always  CREATE TABLE foo(f1 int, f2 text, f3 text[], primary key (f1,f2));
 INSERT INTO foo VALUES (0,'a','{"a0","b0","c0"}');
 INSERT INTO foo VALUES (1,'b','{"a1","b1","c1"}');
 INSERT INTO foo VALUES (2,'c','{"a2","b2","c2"}');
 INSERT INTO foo VALUES (3,'d','{"a3","b3","c3"}');
 INSERT INTO foo VALUES (4,'e','{"a4","b4","c4"}');
 INSERT INTO foo VALUES (5,'f','{"a5","b5","c5"}');
 INSERT INTO foo VALUES (6,'g','{"a6","b6","c6"}');
 INSERT INTO foo VALUES (7,'h','{"a7","b7","c7"}');
 INSERT INTO foo VALUES (8,'i','{"a8","b8","c8"}');
 INSERT INTO foo VALUES (9,'j','{"a9","b9","c9"}');
   SELECT * FROM dblink_get_pkey('foo');
  SELECT dblink_build_sql_insert('foo','1 2',2,'{"0", "a"}','{"99", "xyz"}');
 SELECT dblink_build_sql_insert('foo','1 2 3 4',4,'{"0", "a", "{a0,b0,c0}"}','{"99", "xyz", "{za0,zb0,zc0}"}');
  SELECT dblink_build_sql_update('foo','1 2',2,'{"0", "a"}','{"99", "xyz"}');
 SELECT dblink_build_sql_update('foo','1 2 3 4',4,'{"0", "a", "{a0,b0,c0}"}','{"99", "xyz", "{za0,zb0,zc0}"}');
  SELECT dblink_build_sql_delete('foo','1 2',2,'{"0", "a"}');
 SELECT dblink_build_sql_delete('foo','1 2 3 4',4,'{"0", "a", "{a0,b0,c0}"}');
  CREATE TABLE foo_1(f1 int, f2 text, f3 text[], primary key (f1,f2) include (f3));
 INSERT INTO foo_1 VALUES (0,'a','{"a0","b0","c0"}');
 INSERT INTO foo_1 VALUES (1,'b','{"a1","b1","c1"}');
 INSERT INTO foo_1 VALUES (2,'c','{"a2","b2","c2"}');
 INSERT INTO foo_1 VALUES (3,'d','{"a3","b3","c3"}');
 INSERT INTO foo_1 VALUES (4,'e','{"a4","b4","c4"}');
 INSERT INTO foo_1 VALUES (5,'f','{"a5","b5","c5"}');
 INSERT INTO foo_1 VALUES (6,'g','{"a6","b6","c6"}');
 INSERT INTO foo_1 VALUES (7,'h','{"a7","b7","c7"}');
 INSERT INTO foo_1 VALUES (8,'i','{"a8","b8","c8"}');
 INSERT INTO foo_1 VALUES (9,'j','{"a9","b9","c9"}');
   SELECT * FROM dblink_get_pkey('foo_1');
  SELECT dblink_build_sql_insert('foo_1','1 2',2,'{"0", "a"}','{"99", "xyz"}');
 SELECT dblink_build_sql_insert('foo_1','1 2 3 4',4,'{"0", "a", "{a0,b0,c0}"}','{"99", "xyz", "{za0,zb0,zc0}"}');
  SELECT dblink_build_sql_update('foo_1','1 2',2,'{"0", "a"}','{"99", "xyz"}');
 SELECT dblink_build_sql_update('foo_1','1 2 3 4',4,'{"0", "a", "{a0,b0,c0}"}','{"99", "xyz", "{za0,zb0,zc0}"}');
  SELECT dblink_build_sql_delete('foo_1','1 2',2,'{"0", "a"}');
 SELECT dblink_build_sql_delete('foo_1','1 2 3 4',4,'{"0", "a", "{a0,b0,c0}"}');
  DROP TABLE foo_1;
  CREATE SCHEMA "MySchema";
 CREATE TABLE "MySchema"."Foo"(f1 int, f2 text, f3 text[], primary key (f1,f2));
 INSERT INTO "MySchema"."Foo" VALUES (0,'a','{"a0","b0","c0"}');
  SELECT * FROM dblink_get_pkey('"MySchema"."Foo"');
  SELECT dblink_build_sql_insert('"MySchema"."Foo"','1 2',2,'{"0", "a"}','{"99", "xyz"}');
  SELECT dblink_build_sql_update('"MySchema"."Foo"','1 2',2,'{"0", "a"}','{"99", "xyz"}');
  SELECT dblink_build_sql_delete('"MySchema"."Foo"','1 2',2,'{"0", "a"}');
  CREATE FUNCTION connection_parameters() RETURNS text LANGUAGE SQL AS $f$ SELECT $$dbname='$$||current_database()||$$' port=$$||current_setting('port');
 $f$;
  SELECT * FROM dblink(connection_parameters(),'SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT * FROM dblink('SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  DO $pl$ DECLARE detail text;
 BEGIN PERFORM wait_pid(crash_pid) FROM dblink(connection_parameters(), $$ SELECT pg_backend_pid() FROM dblink( 'service=test_ldap '||connection_parameters(), 'SELECT 1' || set_pgservicefile('pg_service.conf') ) t(c int) $$) AS t(crash_pid int);
 EXCEPTION WHEN OTHERS THEN GET STACKED DIAGNOSTICS detail = PG_EXCEPTION_DETAIL;
 IF NOT detail LIKE 'syntax error in service file%' THEN RAISE;
 END IF;
 END $pl$;
  SELECT dblink_connect(connection_parameters());
  SELECT * FROM dblink('SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT dblink_open('rmt_foo_cursor','SELECT * FROM foobar',false);
  SELECT dblink_exec('ABORT');
  SELECT dblink_open('rmt_foo_cursor','SELECT * FROM foo');
  SELECT dblink_close('rmt_foo_cursor',false);
  SELECT dblink_open('rmt_foo_cursor','SELECT * FROM foo');
  SELECT * FROM dblink_fetch('rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('rmt_foobar_cursor',4,false) AS t(a int, b text, c text[]);
  SELECT dblink_exec('ABORT');
  SELECT dblink_close('rmt_foobar_cursor',false);
  SELECT * FROM dblink_fetch('rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('rmt_foo_cursor',4,false) AS t(a int, b text, c text[]);
  SELECT dblink_disconnect();
  SELECT * FROM dblink('SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT substr(dblink_exec(connection_parameters(),'INSERT INTO foo VALUES(10,''k'',''{"a10","b10","c10"}'')'),1,6);
  SELECT dblink_connect(connection_parameters());
  SELECT substr(dblink_exec('INSERT INTO foo VALUES(11,''l'',''{"a11","b11","c11"}'')'),1,6);
  SELECT * FROM dblink('SELECT * FROM foo') AS t(a int, b text, c text[]);
  SELECT * FROM dblink('SELECT * FROM foobar',false) AS t(a int, b text, c text[]);
  SELECT dblink_exec('UPDATE foo SET f3[2] = ''b99'' WHERE f1 = 11');
  SELECT * FROM dblink('SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE a = 11;
  SELECT dblink_exec('UPDATE foobar SET f3[2] = ''b99'' WHERE f1 = 11',false);
  SELECT dblink_exec('DELETE FROM foo WHERE f1 = 11');
  SELECT * FROM dblink('SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE a = 11;
  SELECT dblink_disconnect();
   SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT dblink_connect('myconn',connection_parameters());
  SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT * FROM dblink('myconn','SELECT * FROM foobar',false) AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT dblink_connect('myconn',connection_parameters());
  SELECT dblink_connect('myconn2',connection_parameters());
  SELECT * FROM dblink('myconn2','SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT dblink_disconnect('myconn2');
  SELECT dblink_open('myconn','rmt_foo_cursor','SELECT * FROM foobar',false);
  SELECT dblink_exec('myconn','ABORT');
  SELECT dblink_exec('myconn','BEGIN');
  SELECT dblink_open('myconn','rmt_foo_cursor','SELECT * FROM foo');
  SELECT dblink_close('myconn','rmt_foo_cursor');
  SELECT dblink_exec('myconn','DECLARE xact_test CURSOR FOR SELECT * FROM foo');
  SELECT dblink_exec('myconn','COMMIT');
  SELECT dblink_open('myconn','rmt_foo_cursor','SELECT * FROM foo');
  SELECT dblink_open('myconn','rmt_foo_cursor2','SELECT * FROM foo');
  SELECT dblink_close('myconn','rmt_foo_cursor2');
  SELECT dblink_exec('myconn','DECLARE xact_test CURSOR FOR SELECT * FROM foo');
  SELECT dblink_close('myconn','rmt_foo_cursor');
  SELECT dblink_exec('myconn','DECLARE xact_test CURSOR FOR SELECT * FROM foo');
  SELECT dblink_exec('myconn','ABORT');
  SELECT dblink_open('myconn','rmt_foo_cursor','SELECT * FROM foo');
  SELECT * FROM dblink_fetch('myconn','rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('myconn','rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('myconn','rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT * FROM dblink_fetch('myconn','rmt_foobar_cursor',4,false) AS t(a int, b text, c text[]);
  SELECT dblink_exec('myconn','ABORT');
  SELECT * FROM dblink_fetch('myconn','rmt_foo_cursor',4) AS t(a int, b text, c text[]);
  SELECT dblink_disconnect('myconn');
  SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE t.a > 7;
  SELECT dblink_connect('myconn',connection_parameters());
  SELECT substr(dblink_exec('myconn','INSERT INTO foo VALUES(11,''l'',''{"a11","b11","c11"}'')'),1,6);
  SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]);
  SELECT dblink_exec('myconn','UPDATE foo SET f3[2] = ''b99'' WHERE f1 = 11');
  SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE a = 11;
  SELECT dblink_exec('myconn','DELETE FROM foo WHERE f1 = 11');
  SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]) WHERE a = 11;
  SELECT dblink_disconnect('myconn');
  SELECT dblink_disconnect('myconn');
  SELECT dblink_connect('dtest1', connection_parameters());
 SELECT * from dblink_send_query('dtest1', 'select * from foo where f1 < 3') as t1;
  SELECT dblink_connect('dtest2', connection_parameters());
 SELECT * from dblink_send_query('dtest2', 'select * from foo where f1 > 2 and f1 < 7') as t1;
  SELECT dblink_connect('dtest3', connection_parameters());
 SELECT * from dblink_send_query('dtest3', 'select * from foo where f1 > 6') as t1;
  CREATE TEMPORARY TABLE result AS (SELECT * from dblink_get_result('dtest1') as t1(f1 int, f2 text, f3 text[])) UNION (SELECT * from dblink_get_result('dtest2') as t2(f1 int, f2 text, f3 text[])) UNION (SELECT * from dblink_get_result('dtest3') as t3(f1 int, f2 text, f3 text[])) ORDER by f1;
  create function unnest(anyarray) returns setof anyelement language sql strict immutable as $$ select $1[i] from generate_series(array_lower($1,1), array_upper($1,1)) as i $$;
  SELECT * FROM unnest(dblink_get_connections()) ORDER BY 1;
  SELECT dblink_is_busy('dtest1');
  SELECT dblink_disconnect('dtest1');
 SELECT dblink_disconnect('dtest2');
 SELECT dblink_disconnect('dtest3');
  SELECT * from result;
  SELECT dblink_connect('dtest1', connection_parameters());
 SELECT * from dblink_send_query('dtest1', 'select * from foo where f1 < 3') as t1;
  SELECT dblink_cancel_query('dtest1');
 SELECT dblink_error_message('dtest1');
 SELECT dblink_disconnect('dtest1');
  CREATE ROLE regress_dblink_user;
 DO $d$ BEGIN EXECUTE $$CREATE SERVER fdtest FOREIGN DATA WRAPPER dblink_fdw OPTIONS (dbname '$$||current_database()||$$', port '$$||current_setting('port')||$$' )$$;
 END;
 $d$;
  CREATE USER MAPPING FOR public SERVER fdtest OPTIONS (server 'localhost');
  -- fail, can't specify server here CREATE USER MAPPING FOR public SERVER fdtest OPTIONS (user :'USER');
  GRANT USAGE ON FOREIGN SERVER fdtest TO regress_dblink_user;
 GRANT EXECUTE ON FUNCTION dblink_connect_u(text, text) TO regress_dblink_user;
  SET SESSION AUTHORIZATION regress_dblink_user;
 SELECT dblink_connect('myconn', 'fdtest');
 SELECT dblink_connect_u('myconn', 'fdtest');
 SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]);
  \c - - REVOKE USAGE ON FOREIGN SERVER fdtest FROM regress_dblink_user;
 REVOKE EXECUTE ON FUNCTION dblink_connect_u(text, text) FROM regress_dblink_user;
 DROP USER regress_dblink_user;
 DROP USER MAPPING FOR public SERVER fdtest;
 DROP SERVER fdtest;
  SELECT dblink_connect(connection_parameters());
  SELECT dblink_exec('LISTEN regression');
 SELECT dblink_exec('LISTEN foobar');
  SELECT dblink_exec('NOTIFY regression');
 SELECT dblink_exec('NOTIFY foobar');
  SELECT notify_name, be_pid = (select t.be_pid from dblink('select pg_backend_pid()') as t(be_pid int)) AS is_self_notify, extra from dblink_get_notify();
  SELECT * from dblink_get_notify();
  SELECT dblink_disconnect();
  CREATE TEMP TABLE test_dropped ( col1 INT NOT NULL DEFAULT 111, id SERIAL PRIMARY KEY, col2 INT NOT NULL DEFAULT 112, col2b INT NOT NULL DEFAULT 113 );
  INSERT INTO test_dropped VALUES(default);
  ALTER TABLE test_dropped DROP COLUMN col1, DROP COLUMN col2, ADD COLUMN col3 VARCHAR(10) NOT NULL DEFAULT 'foo', ADD COLUMN col4 INT NOT NULL DEFAULT 42;
  SELECT dblink_build_sql_insert('test_dropped', '1', 1, ARRAY['1'::TEXT], ARRAY['2'::TEXT]);
  SELECT dblink_build_sql_update('test_dropped', '1', 1, ARRAY['1'::TEXT], ARRAY['2'::TEXT]);
  SELECT dblink_build_sql_delete('test_dropped', '1', 1, ARRAY['2'::TEXT]);
  SET datestyle = ISO, MDY;
 SET intervalstyle = postgres;
 SET timezone = UTC;
 SELECT dblink_connect('myconn',connection_parameters());
 SELECT dblink_exec('myconn', 'SET datestyle = GERMAN, DMY;
');
  SELECT * FROM dblink('myconn', 'SELECT * FROM (VALUES (''12.03.2013 00:00:00+00'')) t') AS t(a timestamptz);
  SELECT * FROM dblink('myconn', 'SELECT * FROM (VALUES (''12.03.2013 00:00:00+00''), (''12.03.2013 00:00:00+00'')) t') AS t(a timestamptz);
  SELECT * FROM dblink_send_query('myconn', 'SELECT * FROM (VALUES (''12.03.2013 00:00:00+00'')) t');
 CREATE TEMPORARY TABLE result AS (SELECT * from dblink_get_result('myconn') as t(t timestamptz)) UNION ALL (SELECT * from dblink_get_result('myconn') as t(t timestamptz));
 SELECT * FROM result;
 DROP TABLE result;
  SELECT * FROM dblink_send_query('myconn', 'SELECT * FROM (VALUES (''12.03.2013 00:00:00+00''), (''12.03.2013 00:00:00+00'')) t');
 CREATE TEMPORARY TABLE result AS (SELECT * from dblink_get_result('myconn') as t(t timestamptz)) UNION ALL (SELECT * from dblink_get_result('myconn') as t(t timestamptz)) UNION ALL (SELECT * from dblink_get_result('myconn') as t(t timestamptz));
 SELECT * FROM result;
 DROP TABLE result;
  SELECT dblink_exec('myconn', 'SET intervalstyle = sql_standard;
');
 SELECT * FROM dblink('myconn', 'SELECT * FROM (VALUES (''-1 2:03:04'')) i') AS i(i interval);
  CREATE TEMPORARY TABLE result (t timestamptz);
  SELECT dblink_exec('myconn', 'SET datestyle = ISO, MDY;
');
 INSERT INTO result SELECT * FROM dblink('myconn', 'SELECT * FROM (VALUES (''03.12.2013 00:00:00+00'')) t') AS t(a timestamptz);
  SELECT dblink_exec('myconn', 'SET datestyle = GERMAN, DMY;
');
 INSERT INTO result SELECT * FROM dblink('myconn', 'SELECT * FROM (VALUES (''12.03.2013 00:00:00+00'')) t') AS t(a timestamptz);
  SELECT * FROM result;
  DROP TABLE result;
  SELECT dblink_open('myconn','error_cursor', 'SELECT * FROM (VALUES (''1''), (''not an int'')) AS t(text);
');
 SELECT * FROM dblink_fetch('myconn','error_cursor', 1) AS t(i int);
 SELECT * FROM dblink_fetch('myconn','error_cursor', 1) AS t(i int);
  SHOW datestyle;
 SHOW intervalstyle;
  SELECT dblink_disconnect('myconn');
 RESET datestyle;
 RESET intervalstyle;
 RESET timezone;
 